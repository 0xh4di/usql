#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sat Jun 16 19:46:03 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./usql file://test.db
match_max 100000
expect -exact "Type \"help\" for help.\r
\r
\[J\[2K\rsq:test.db=>  "
send -- "-- sqlite3 test script\r\r\\set\r\rhelp\r\r\\?\r\r\\copyright\r\r\\set SYNTAX_HL_STYLE dracula\r\rselect 'test''\r' \\g\r\r\\set NAME myname\r\rPRAGMA foreign_keys = 1;\r\rDROP TABLE IF EXISTS books;\r\rDROP TABLE IF EXISTS authors;\r\rCREATE TABLE authors (\r  author_id integer NOT NULL PRIMARY KEY AUTOINCREMENT,\r  name text NOT NULL DEFAULT ''\r);\r\rCREATE INDEX authors_name_idx ON authors(name);\r\r\\set SYNTAX_HL_STYLE paraiso-dark\r\rCREATE TABLE books (\r  /*\r    this is a multiline comment\r   */\r  book_id integer NOT NULL PRIMARY KEY AUTOINCREMENT, -- the id of the author\r  author_id integer NOT NULL REFERENCES authors(author_id),\r  isbn text NOT NULL DEFAULT '' UNIQUE,\r  title text NOT NULL DEFAULT '',\r  year integer NOT NULL DEFAULT 2000,\r  available timestamp with time zone NOT NULL DEFAULT '',\r  tags text NOT NULL DEFAULT '{}'\r);\r\rCREATE INDEX books_title_idx ON books(title, year);\r\rinsert into authors (name) values\r  (\"jk rowling\"),\r  (\"author amazing\")\r\\g\r\r  select * from authors;\r\r\\set COLNAME name\r\\set NAME amaz\r\r\\echo `echo hello`\r\rselect :\"COLNAME\" from authors where :COLNAME like '%' || :'NAME' || '%'\r\r\\print \\raw\r\r\\g\r\r\\gset AUTHOR_\r\rselect :'AUTHOR_name';\r\r\\begin\rinsert into authors (name) values ('test');\r\\rollback\r\rinsert into authors (name) values ('hello');\rselect * from authors;\r\rinsert into books (author_id, isbn, title, year, available) values\r  (1, '1', 'one', 2018, '2018-06-01 00:00:00'),\r  (2, '2', 'two', 2019, '2019-06-01 00:00:00')\r;\r\rselect * from books b inner join authors a on a.author_id = b.author_id;\r\r  /* exiting! */\r\\q\r"
expect eof
